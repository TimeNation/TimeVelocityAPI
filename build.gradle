plugins {
    id 'com.github.johnrengelman.shadow' version '7.1.2'
    id 'java'
    id 'eclipse'
    id "org.jetbrains.gradle.plugin.idea-ext" version "1.0.1"
}

group = 'net.timenation'
version = '2.0-SNAPSHOT'
compileJava.options.encoding = 'UTF-8'

repositories {
    mavenCentral()
    maven {
        name = 'velocitypowered-repo'
        url = 'https://nexus.velocitypowered.com/repository/maven-public/'
    }
    maven { url "https://repo.thesimplecloud.eu/artifactory/gradle-release-local/" }
    maven { url "https://oss.sonatype.org/content/repositories/snapshots/" }
}

dependencies {
    compileOnly group: 'net.kyori', name: 'adventure-text-minimessage', version: '4.10.1'
    compileOnly 'com.velocitypowered:velocity-api:3.0.1'
    compileOnly group: 'eu.thesimplecloud.simplecloud', name: 'simplecloud-api', version: "2.3.0";
    compileOnly group: 'eu.thesimplecloud.simplecloud', name: 'simplecloud-module-permission', version: "2.3.0";
    compileOnly 'org.projectlombok:lombok:1.18.22'

    implementation 'com.rabbitmq:amqp-client:5.14.2'
    implementation group: 'mysql', name: 'mysql-connector-java', version: '8.0.28'

    annotationProcessor 'org.projectlombok:lombok:1.18.22'
    annotationProcessor 'com.velocitypowered:velocity-api:3.0.1'
}

def targetJavaVersion = 17
java {
    def javaVersion = JavaVersion.toVersion(targetJavaVersion)
    sourceCompatibility = javaVersion
    targetCompatibility = javaVersion
    if (JavaVersion.current() < javaVersion) {
        toolchain.languageVersion = JavaLanguageVersion.of(targetJavaVersion)
    }
}

tasks.withType(JavaCompile).configureEach {
    if (targetJavaVersion >= 10 || JavaVersion.current().isJava10Compatible()) {
        options.release = targetJavaVersion
    }
}

def templateSource = file('src/main/templates')
def templateDest = layout.buildDirectory.dir('generated/sources/templates')
def generateTemplates = tasks.register('generateTemplates', Copy) { task ->
    def props = [
            'version': project.version
    ]
    task.inputs.properties props

    task.from templateSource
    task.into templateDest
    task.expand props
}

sourceSets.main.java.srcDir(generateTemplates.map { it.outputs })

rootProject.idea.project.settings.taskTriggers.afterSync generateTemplates
project.eclipse.synchronizationTasks(generateTemplates)
